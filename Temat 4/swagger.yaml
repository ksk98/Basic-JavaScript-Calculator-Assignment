openapi: 3.0.3
info:
  title: Art Gallery API
  description: This is an example API for an art gallery.
  version: 0.1.0
tags:
  - name: media
    description: Galleries and paintings
  - name: user
    description: User management and browsing
paths:
  /gallery:
    post:
      tags:
        - media
      summary: Create gallery
      operationId: createGallery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Gallery'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id: 
                    type: integer
                    format: int64
                    example: 10
        '403':
          description: User is not logged in
  /gallery/{id}:
    get:
      tags:
        - media
      summary: View gallery
      operationId: getGallery
      parameters:
        - name: id
          in: path
          description: galler ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Gallery'
        '403':
          description: Gallery is private and user is not the owner
        '404':
          description: Gallery doesn't exist
    put:
      tags:
        - media
      summary: Edit gallery
      operationId: editGallery
      parameters:
        - name: id
          in: path
          description: gallery ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '403':
          description: Unauthorized
        '404':
          description: Gallery doesn't exist
    delete:
      tags:
        - media
      summary: Delete gallery
      operationId: deleteGallery
      parameters:
        - name: id
          in: path
          description: galler ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
        '403':
          description: Unauthorized
        '404':
          description: Gallery doesn't exist
  /image:
    post:
      tags:
        - media
      summary: Post image
      operationId: createImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
      responses:
        '201':
          description: Successful operation
        '403':
          description: Unauthorized
  /image/{id}:
    get:
      tags:
        - media
      summary: Get image
      operationId: getImage
      parameters:
        - name: id
          in: path
          description: image ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '403':
          description: Unauthorized
        '404':
          description: Image doesn't exist
    delete:
      tags:
        - media
      summary: Delete image
      operationId: deleteImage
      parameters:
        - name: id
          in: path
          description: image ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
        '403':
          description: Unauthorized
        '404':
          description: Image doesn't exist
  /user:
    post:
      tags:
        - user
      summary: Create user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successful operation
        '409':
          description: Login/Email already in use
  /user/login:
    post:
      tags:
        - user
      summary: Login user
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                login:
                  type: string
                  example: polska_gur0m
                password:
                  type: string
                  example: secure123!!!
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '403':
          description: Incorrect login/password
  /user/{id}:
    put:
      tags:
        - user
      summary: Edit user
      description: This can only be done by logged user on self or admin or any
      operationId: editUser
      parameters:
        - name: id
          in: path
          description: user ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: Operation Successful
        '403':
          description: Unauthorized
        '404':
          description: Incorrect ID
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by logged user on self or admin or any
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: user ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Operation Successful
        '403':
          description: Unauthorized
        '404':
          description: Incorrect ID
components:
  schemas:
    Tag:
      type: object
      required:
        - text
      properties:
        id: 
          type: integer
          format: int64
          example: 10
        text:
          type: string
          example: landscape
    Comment:
      type: object
      required:
        - text
      properties:
        id: 
          type: integer
          format: int64
          example: 10
        text:
          type: string
          example: nice pic bro
        datetime:
          type: string
          format: date-time
    Thumbnail:
      type: object
      properties:
        thumbnail-type:
          type: string
    Image:
      type: object
      required:
        - title
        - description
        - filename
        - path
      properties:
        id: 
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: local mountain range
        description:
          type: string
          example: very beautiful at this time of year
        datetime:
          type: string
          format: date-time
        filename:
          type: string
        path:
          type: string
        size:
          type: integer
          format: int64
        tags:
          type: array
          items: 
            $ref: '#/components/schemas/Tag'
    Session:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 10
        token:
          type: string
        expires:
          type: string
          format: date-time
    User:
      type: object
      required:
        - name
        - surname
        - login
        - password
        - email
      properties:
        id: 
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: Grzegorz
        surname:
          type: string
          example: BrzÄ™czyszczykiewicz
        login:
          type: string
          example: polska_gur0m
        password:
          type: string
          example: secure123!!!
        email:
          type: string
          example: pierogi@bigos.pl
    Admin:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            permissions:
              type: array
              items:
                type: string
    Gallery:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: local mountain range
        description:
          type: string
          example: very beautiful at this time of year
        datetime:
          type: string
          format: date-time
        visibility:
          type: string
          enum:
            - public
            - private
        tags:
          type: array
          items: 
            $ref: '#/components/schemas/Tag'